"$schema" = 'https://starship.rs/config-schema.json'

format = '''$directory$git_branch$git_status$git_state$direnv$java$golang$ruby$node$custom
$status$character'''

right_format = "$memory_usage$battery"

[time]
disabled = false

[status]
format = "[$status]($style)"
disabled = false

[directory]
style = "bold cyan"

[git_status]
format = "([$all_status$ahead_behind]($style))"
style = "yellow"
stashed = "󰴮 "
modified = "󰏫 ($count) "
staged = "󰶍 "
untracked = "󰊇 ($count) "
deleted = " "

[ruby]
symbol = " "
format = "[$symbol($version )]($style)"

[java]
symbol = " "
format = "[$symbol($version )]($style)"

[git_branch]
style = "yellow"
symbol = " "

[character]
success_symbol = "[❯](bold cyan)"
error_symbol = "[❯](red)"
vimcmd_symbol = "[ ](green)"
vimcmd_visual_symbol = "[ ](yellow)"

[battery]
format = "[$symbol $percentage]($style) "
full_symbol = "󱊣"
charging_symbol = "󰚥"
unknown_symbol = "󱈑"

[[battery.display]]
threshold = 100
style = "green"
discharging_symbol = "󱊣"

[[battery.display]]
threshold = 75
style = "green"

[[battery.display]]
threshold = 50
style = "yellow"
discharging_symbol = "󱊢"

[[battery.display]]
threshold = 20
style = "yellow"
discharging_symbol = "󱊡"

[[battery.display]]
threshold = 0
style = "red"
discharging_symbol = "󰂃"

[nix_shell]
disabled = false
format = "[$symbol$state( \\($name\\))]($style) "
symbol = "󰜗 "

[golang]
symbol = "󰟓 "
style = "bold green"

[custom.devbox]
description = "Shows the devbox version if inside a devbox project"
shell = '/bin/bash'
when = '''
[[ -n $DEVBOX_INIT_PATH ]]
'''
command = '''
command_output=$(devbox version 2>&1)
version=$(echo "$command_output" | grep -E '^[0-9]+(\.[0-9]+){2}$')
if echo "$command_output" | grep -q "Info: New devbox available:"; then 
  update_version=$(echo "$command_output" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | sed -n '2p')
  echo "$version update available ($update_version)" 
else
  echo "$version"
fi
'''
style="bold blue"
symbol = " "
format = "[$symbol v($output )]($style)"

[custom.direnv]
description = "Shows if direnv has not been allowed if inside a project with a .envrc and devbox.json"
shell = "sh"
when = '''
[[ -n $DIRENV_FILE ]]
'''
command = '''
if [[ -f ./devbox.json ]]; then
  direnv_output=$(direnv status)
  ## Confusingly, direnv has a status of 0 for allowed
  if echo $direnv_output | grep -q "Found RC allowed 0"; then
    echo ""
  else
    echo " direnv is not allowed"
  fi
fi
'''
